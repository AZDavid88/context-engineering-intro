{
  "docker_compose_services": {
    "ray-head": {
      "service_name": "ray-head",
      "image_or_build": "docker/genetic-pool/Dockerfile",
      "command": [
        "head"
      ],
      "entrypoint": [],
      "ports": [
        "8265:8265",
        "10001:10001",
        "8000:8000"
      ],
      "environment": [
        "RAY_HEAD_NODE_HOST=0.0.0.0",
        "RAY_HEAD_NODE_PORT=10001",
        "RAY_DISABLE_IMPORT_WARNING=1",
        "GENETIC_ALGORITHM_MODE=distributed"
      ],
      "volumes": [
        "./data:/app/data",
        "./logs:/app/logs",
        "./results:/app/results",
        "./infrastructure/config:/app/infrastructure/config"
      ],
      "depends_on": []
    },
    "ray-worker-1": {
      "service_name": "ray-worker-1",
      "image_or_build": "docker/genetic-pool/Dockerfile",
      "command": [
        "worker"
      ],
      "entrypoint": [],
      "ports": [],
      "environment": [
        "RAY_HEAD_ADDRESS=ray-head:10001",
        "RAY_DISABLE_IMPORT_WARNING=1",
        "WORKER_TYPE=cpu_intensive"
      ],
      "volumes": [
        "./data:/app/data",
        "./logs:/app/logs",
        "./results:/app/results"
      ],
      "depends_on": {
        "ray-head": {
          "condition": "service_healthy"
        }
      }
    },
    "ray-worker-2": {
      "service_name": "ray-worker-2",
      "image_or_build": "docker/genetic-pool/Dockerfile",
      "command": [
        "worker"
      ],
      "entrypoint": [],
      "ports": [],
      "environment": [
        "RAY_HEAD_ADDRESS=ray-head:10001",
        "RAY_DISABLE_IMPORT_WARNING=1",
        "WORKER_TYPE=memory_intensive"
      ],
      "volumes": [
        "./data:/app/data",
        "./logs:/app/logs",
        "./results:/app/results"
      ],
      "depends_on": {
        "ray-head": {
          "condition": "service_healthy"
        }
      }
    },
    "genetic-pool": {
      "service_name": "genetic-pool",
      "image_or_build": "docker/genetic-pool/Dockerfile",
      "command": [
        "distributed",
        "--population-size",
        "100",
        "--max-generations",
        "50"
      ],
      "entrypoint": [],
      "ports": [
        "8080:8080"
      ],
      "environment": [
        "RAY_ADDRESS=ray-head:10001",
        "RAY_DISABLE_IMPORT_WARNING=1",
        "GENETIC_ALGORITHM_MODE=distributed",
        "POPULATION_SIZE=100",
        "MAX_GENERATIONS=50",
        "ENVIRONMENT=development",
        "PLATFORM=local"
      ],
      "volumes": [
        "./data:/app/data",
        "./logs:/app/logs",
        "./results:/app/results",
        "./infrastructure/config:/app/infrastructure/config",
        "./src:/app/src"
      ],
      "depends_on": {
        "ray-head": {
          "condition": "service_healthy"
        },
        "ray-worker-1": {
          "condition": "service_healthy"
        },
        "ray-worker-2": {
          "condition": "service_healthy"
        }
      }
    },
    "redis": {
      "service_name": "redis",
      "image_or_build": "redis:7-alpine",
      "command": "redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru",
      "entrypoint": [],
      "ports": [
        "6379:6379"
      ],
      "environment": [],
      "volumes": [
        "redis-data:/data"
      ],
      "depends_on": []
    },
    "postgres": {
      "service_name": "postgres",
      "image_or_build": "postgres:15-alpine",
      "command": [],
      "entrypoint": [],
      "ports": [
        "5432:5432"
      ],
      "environment": [
        "POSTGRES_DB=genetic_trading",
        "POSTGRES_USER=genetic_user",
        "POSTGRES_PASSWORD=genetic_password"
      ],
      "volumes": [
        "postgres-data:/var/lib/postgresql/data",
        "./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql"
      ],
      "depends_on": []
    },
    "prometheus": {
      "service_name": "prometheus",
      "image_or_build": "prom/prometheus:latest",
      "command": [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--storage.tsdb.path=/prometheus",
        "--web.console.libraries=/etc/prometheus/console_libraries",
        "--web.console.templates=/etc/prometheus/consoles",
        "--storage.tsdb.retention.time=200h",
        "--web.enable-lifecycle"
      ],
      "entrypoint": [],
      "ports": [
        "9090:9090"
      ],
      "environment": [],
      "volumes": [
        "./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml",
        "prometheus-data:/prometheus"
      ],
      "depends_on": []
    },
    "grafana": {
      "service_name": "grafana",
      "image_or_build": "grafana/grafana:latest",
      "command": [],
      "entrypoint": [],
      "ports": [
        "3000:3000"
      ],
      "environment": [
        "GF_SECURITY_ADMIN_PASSWORD=genetic_admin",
        "GF_USERS_ALLOW_SIGN_UP=false"
      ],
      "volumes": [
        "grafana-data:/var/lib/grafana",
        "./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards",
        "./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources"
      ],
      "depends_on": [
        "prometheus"
      ]
    },
    "dev-tools": {
      "service_name": "dev-tools",
      "image_or_build": "docker/genetic-pool/Dockerfile",
      "command": [
        "shell"
      ],
      "entrypoint": [],
      "ports": [],
      "environment": [
        "RAY_ADDRESS=ray-head:10001",
        "DEVELOPMENT_MODE=true"
      ],
      "volumes": [
        "./:/app",
        "./data:/app/data",
        "./logs:/app/logs",
        "./results:/app/results"
      ],
      "depends_on": [
        "ray-head"
      ]
    }
  },
  "dockerfile_commands": [
    {
      "file": "docker/genetic-pool/Dockerfile",
      "commands": [
        {
          "line": 32,
          "type": "RUN",
          "command": "apt-get update && apt-get install -y \\"
        },
        {
          "line": 43,
          "type": "RUN",
          "command": "echo \"deap==1.4.1\" >> /app/requirements.txt && \\"
        },
        {
          "line": 54,
          "type": "RUN",
          "command": "pip install --no-cache-dir \\"
        },
        {
          "line": 67,
          "type": "RUN",
          "command": "mkdir -p /app/infrastructure/config"
        },
        {
          "line": 73,
          "type": "RUN",
          "command": "mkdir -p /app/data /app/logs /app/results"
        },
        {
          "line": 76,
          "type": "RUN",
          "command": "mkdir -p /tmp/ray"
        },
        {
          "line": 80,
          "type": "RUN",
          "command": "chmod +x /app/health_check.py"
        },
        {
          "line": 84,
          "type": "RUN",
          "command": "chmod +x /app/entrypoint.sh"
        },
        {
          "line": 88,
          "type": "CMD",
          "command": "python /app/health_check.py"
        },
        {
          "line": 99,
          "type": "RUN",
          "command": "adduser \\"
        },
        {
          "line": 111,
          "type": "ENTRYPOINT",
          "command": "[\"/app/entrypoint.sh\"]"
        },
        {
          "line": 114,
          "type": "CMD",
          "command": "[\"python\", \"/app/src/execution/genetic_strategy_pool.py\", \"--mode\", \"distributed\"]"
        }
      ]
    }
  ],
  "test_execution_patterns": [
    {
      "config_file": "pytest.ini",
      "testpaths": [
        "tests"
      ],
      "markers": [],
      "addopts": "--tb"
    },
    {
      "type": "poetry_test_script",
      "script": "backtest-runner = \"src.backtesting.vectorbt_engine:main\""
    }
  ],
  "validation_scripts": [
    {
      "file": "scripts/utilities/migrate_test_files.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/complete_system_integration_validator.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/comprehensive_genetic_seed_validation.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/verify_stability_test.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/final_system_validation.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/validate_phase4_neon_integration.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/comprehensive_system_integration_test.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/validation/comprehensive_system_validation.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/test_advanced_genetic_engine.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/test_definitive_fixes.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/run_genetic_strategy_pool_tests.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/test_complete_pipeline_integration.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/test_research_engine.py",
      "type": "validation_script"
    },
    {
      "file": "scripts/integration/test_optimized_pipeline_integration.py",
      "type": "validation_script"
    }
  ]
}